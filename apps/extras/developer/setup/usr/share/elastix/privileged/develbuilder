#!/usr/bin/php
<?php
/* vim: set expandtab tabstop=4 softtabstop=4 shiftwidth=4:
  CodificaciÃ³n: UTF-8
  +----------------------------------------------------------------------+
  | Elastix version 1.0                                                  |
  | http://www.elastix.com                                               |
  +----------------------------------------------------------------------+
  | Copyright (c) 2006 Palosanto Solutions S. A.                         |
  +----------------------------------------------------------------------+
  | Cdla. Nueva Kennedy Calle E 222 y 9na. Este                          |
  | Telfs. 2283-268, 2294-440, 2284-356                                  |
  | Guayaquil - Ecuador                                                  |
  | http://www.palosanto.com                                             |
  +----------------------------------------------------------------------+
  | The contents of this file are subject to the General Public License  |
  | (GPL) Version 2 (the "License"); you may not use this file except in |
  | compliance with the License. You may obtain a copy of the License at |
  | http://www.opensource.org/licenses/gpl-license.php                   |
  |                                                                      |
  | Software distributed under the License is distributed on an "AS IS"  |
  | basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See  |
  | the License for the specific language governing rights and           |
  | limitations under the License.                                       |
  +----------------------------------------------------------------------+
  | The Original Code is: Elastix Open Source.                           |
  | The Initial Developer of the Original Code is PaloSanto Solutions    |
  +----------------------------------------------------------------------+
  $Id: develbuilder.php,v 1.1 2007/01/09 23:49:36 alex Exp $
*/
require_once 'Console/Getopt.php';

define('FRAMEWORKLANG', '/var/www/html/lang');
define('MODULEPATH', '/var/www/html/modules');
define('MODULE_TEMPLATE_PATH', '/var/www/html/modules/build_module/libs/sources');

load_default_timezone();

// Parse command-line options
$opt = Console_Getopt::getopt($argv, '', array(
    'createmodule=',    // Create a brand new module directory from XML specfile
    'deletemodule=',    // Delete a module directory without touching acls
    'createlanguage=',  // Create support files for a new language
    'addtranslation',   // Add a translated string to a language file
    'savetranslation=',// Replace translations with the ones supplied in XML
    'module=',          // Module to add a translation to
    'language=',       // Language to add a translation to
    'string-en=',       // English string to use for translation key
    'string-tr=',       // Translated string
));
if (PEAR::isError($opt)) error_exit($opt->getMessage()."\n");
//validateOptions($opt);
foreach ($opt[0] as $option) switch ($option[0]) {
case '--createmodule':
    exit(action_createModule($opt) ? 0 : 1);
case '--deletemodule':
    exit(action_deleteModule($opt) ? 0 : 1);
case '--createlanguage':
    exit(action_createLanguage($opt) ? 0 : 1);
case '--addtranslation':
    exit(action_addTranslation($opt) ? 0 : 1);
case '--savetranslation':
    exit(action_saveTranslation($opt) ? 0 : 1);
}
error_exit("No action specified (--createmodule,--deletemodule,--createlanguage,--addtranslation,--savetranslations)\n");

function error_exit($sMsg, $errorcode = 1)
{
    fwrite(STDERR, $sMsg);
    exit($errorcode);
}

function load_default_timezone()
{
    $sDefaultTimezone = @date_default_timezone_get();
    if ($sDefaultTimezone == 'UTC') {
        $sDefaultTimezone = 'America/New_York';
        $regs = NULL;
        if (is_link("/etc/localtime") && preg_match("|/usr/share/zoneinfo/(.+)|", readlink("/etc/localtime"), $regs)) {
            $sDefaultTimezone = $regs[1];
        } elseif (file_exists('/etc/sysconfig/clock')) {
            foreach (file('/etc/sysconfig/clock') as $s) {
                $regs = NULL;
                if (preg_match('/^ZONE\s*=\s*"(.+)"/', $s, $regs)) {
                    $sDefaultTimezone = $regs[1];
                }
            }
        }
    }
    date_default_timezone_set($sDefaultTimezone);
}

function action_deleteModule($opt)
{
    $sModuleDir = NULL;

    // Name of module directory
    foreach ($opt[0] as $option) switch ($option[0]) {
    case '--deletemodule':
        $sModuleDir = $option[1];
        break;
    }
    if (is_null($sModuleDir)) error_exit("ERR: module directory not specified!\n");
    if (!preg_match('/^\w+$/', $sModuleDir))
        error_exit("ERR: invalid module directory: ".$sModuleDir."\n");
    $retval = NULL;
    system('rm -rf '.escapeshellarg(MODULEPATH.'/'.$sModuleDir), $retval);
    return ($retval == 0);
}

function action_createModule($opt)
{
    $sModuleSpec = NULL;

    // Name of XML specification of module
    foreach ($opt[0] as $option) switch ($option[0]) {
    case '--createmodule':
        $sModuleSpec = $option[1];
        break;
    }
    if (is_null($sModuleSpec)) error_exit("ERR: module spec not specified!\n");
    if (!is_readable($sModuleSpec)) error_exit("ERR: module spec at $sModuleSpec is not readable!\n");
    $xml_modulespec = simplexml_load_file($sModuleSpec);
    if ($xml_modulespec === FALSE) error_exit("ERR: failed to parse $sModuleSpec as XML!\n");

    if (!preg_match('/^\w+$/', $xml_modulespec->id))
        error_exit("ERR: invalid module id: ".$xml_modulespec->id."\n");

    // List of files to be created as part of a new module
    $files = array(
        array(
            'filename'  =>  'index.php',
            'directory' =>  NULL,
            'content'   =>  buildModule_index($xml_modulespec),
        ),
        array(
            'filename'  =>  'default.conf.php',
            'directory' =>  'configs',
            'content'   =>  buildModule_defaultconf($xml_modulespec),
        ),
        array(
            'filename'  =>  'en.lang',
            'directory' =>  'lang',
            'content'   =>  buildModule_lang($xml_modulespec),
        ),
        array(
            'filename'  =>  'paloSanto'.phpidentifier($xml_modulespec->name).'.class.php',
            'directory' =>  'libs',
            'content'   =>  buildModule_libs($xml_modulespec),
        ),
        array(
            'filename'  =>  ((string)$xml_modulespec->id).'.hlp',
            'directory' =>  'help',
            'content'   =>  loadTemplate('help.tpl'),
        ),
        array(
            'filename'  =>  NULL,
            'directory' =>  'images',
            'content'   =>  NULL,
        ),
    );
    if (isset($xml_modulespec->form)) {
        $files[] = array(
            'filename'  =>  'form.tpl',
            'directory' =>  'themes/default',
            'content'   =>  buildModule_formtpl($xml_modulespec),
        );
    } elseif (isset($xml_modulespec->grid)) {
        $files[] = array(
            'filename'  =>  'filter.tpl',
            'directory' =>  'themes/default',
            'content'   =>  loadTemplate('filter.tpl'),
        );
    }

    // Create files in corresponding directories
    $sModuleDirectory = MODULEPATH.'/'.((string)$xml_modulespec->id);
    foreach ($files as &$filespec) {
        $sDirectory = $sModuleDirectory;
        if (!is_null($filespec['directory']))
            $sDirectory .= '/'.$filespec['directory'];
        if (!is_dir($sDirectory) && !mkdir($sDirectory, 0755, TRUE))
            error_exit("ERR: failed to create directory: $sDirectory\n");
        if (!is_null($filespec['filename']) && !is_null($filespec['content'])) {
            $sFilepath = $sDirectory.'/'.$filespec['filename'];
            if (FALSE === file_put_contents($sFilepath, $filespec['content']))
                error_exit("ERR: failed to write file $sFilepath\n");
        }
    }

    return TRUE;
}

function buildModule_index($xml_modulespec)
{
    // Load and replace in comment section for index file
    $sContent = buildModule_phpheader($xml_modulespec, 'index.php');

    // Load and replace main section according to chosen variant
    if (isset($xml_modulespec->form)) {
        $sContentForm = '';
        $widgetCache = array();
        foreach ($xml_modulespec->form->field as $xml_field) {
            $sFieldType = (string)$xml_field['type'];
            if (!preg_match('/^\w+$/', $sFieldType))
                error_exit("ERR: invalid field type ".$xml_field['type']."\n");
            if (!isset($widgetCache[$sFieldType]))
                $widgetCache[$sFieldType] = loadTemplate('fields_form/'.$sFieldType.'.s');
            $sContentForm .= str_replace(
                array(
                    '{LABEL_FIELD}',
                    '{NAME_FIELD}'),
                array(
                    phpstring((string)$xml_field),
                    phpidentifier(strtolower(trim($xml_field)))),
                $widgetCache[$sFieldType]);
        }

        $sContent .= str_replace('{ARR_FIELDS_FORM}', $sContentForm,
            loadTemplate('index_form.s'));
    } elseif (isset($xml_modulespec->grid)) {
        $blockRows    ="";
        $blockColumns ="";
        $blockFilters ="";
        foreach ($xml_modulespec->grid->column as $xml_column) {
            $key = (string)$xml_column['key'];
            $column = (string)$xml_column;

            $sColumnKey = phpidentifier(strtolower($column));
            $sColumnString = phpstring($column);

            $blockRows .= "\n\t    \$arrTmp[$key] = \$value['$sColumnKey'];";
            $blockColumns .= "_tr(\"$sColumnString\"),";
            $blockFilters .= "\n\t    \"$sColumnKey\" => _tr(\"$sColumnString\"),";
        }

        $sContent .= str_replace(
            array(
                '{ARR_DATA_ROWS}',
                '{ARR_NAME_COLUMNS}',
                '{ARR_FILTERS}'),
            array(
                $blockRows,
                $blockColumns,
                $blockFilters),
            loadTemplate('index_grid.s')
        );
    } else {
        error_exit("ERR: unknown or missing module type\n");
    }

    return str_replace(
        array(
            '{NAME_CLASS}',
            '{NEW_MODULE_NAME}'),
        array(
            phpidentifier($xml_modulespec->name),
            phpstring($xml_modulespec->name)),
        $sContent).'?>';
}

function buildModule_defaultconf($xml_modulespec)
{
    // Load and replace in comment section for config file
    $sContent = buildModule_phpheader($xml_modulespec, 'default.conf.php');

    $sContent .= str_replace(
        '{MODULE_ID}',
        $xml_modulespec->id,
        loadTemplate('default.s')).'?>';
    return $sContent;
}

function buildModule_formtpl($xml_modulespec)
{
    $sTemplate = loadTemplate('fields_form/fields_form.tpl');
    $sContentForm = '';
    foreach ($xml_modulespec->form->field as $xml_field) {
        $sContentForm .= str_replace(
            '{FIELD_LABEL}',
            phpidentifier(strtolower(trim($xml_field))),
            $sTemplate);
    }
    return str_replace('{FIELDS_FORM}', $sContentForm, loadTemplate('form.tpl'));
}

function buildModule_lang($xml_modulespec)
{
    // Load and replace in comment section for config file
    $sContent = buildModule_phpheader($xml_modulespec, 'en.lang');

    $s = phpstring($xml_modulespec->name);
    $langList = array("\"$s\" => \"$s\"");
    if (isset($xml_modulespec->form)) {
        foreach ($xml_modulespec->form->field as $xml_field) {
            $s = phpstring($xml_field);
            $langList[] = "\"$s\" => \"$s\"";
        }
    }
    return $sContent.str_replace(
        '{LANG_CONTENT}', implode(",\n", $langList), loadTemplate('lang.s')).
        '?>';
}

function buildModule_libs($xml_modulespec)
{
    // Load and replace in comment section for library file
    $sClassName = phpidentifier($xml_modulespec->name);
    $sContent = buildModule_phpheader($xml_modulespec, "paloSanto{$sClassName}.class.php");

    return $sContent.str_replace('{NAME_CLASS}', $sClassName, loadTemplate('lib_class.s'));
}

function buildModule_phpheader($xml_modulespec, $sFileName)
{
    return "<?php\n".str_replace(
        array(
            '{ELASTIX_VERSION}',
            '{DATE}',
            '{YOUR_NAME}',
            '{FILE_NAME}',
            '{YOUR_EMAIL}'),
        array(
            (string)$xml_modulespec->elastixversion,
            date('Y-m-d h:m:s'),
            (string)$xml_modulespec->author,
            $sFileName,
            (string)$xml_modulespec->email),
        loadTemplate('comment.s'));
}

// Return a string that can be used as a PHP identifier for a class name
function phpidentifier($s)
{
    $s = preg_replace('/\W/', '_', $s);
    $s = preg_replace('/_+/', '_', $s);
    $s = preg_replace("/_$/", '', $s);
    return $s;
}

// Return a string that can be embedded inside double quotes in PHP code
function phpstring($s)
{
    // Escape ASCII 0..31 (37 octal) plus dollar, double quote, backslash
    return addcslashes($s, "\0..\37\$\"\\");
}

// Read a template from specified path and error out on failure
function loadTemplate($s)
{
    $sTemplatePath = MODULE_TEMPLATE_PATH.'/'.$s;
    $sTemplate = file_get_contents($sTemplatePath);
    if ($sTemplate === FALSE) error_exit("ERR: failed to read template $sTemplatePath\n");
    return $sTemplate;
}

function action_createLanguage($opt)
{
    $sLanguage = NULL;

    // Name of new language string, without .lang
    foreach ($opt[0] as $option) switch ($option[0]) {
    case '--createlanguage':
        $sLanguage = $option[1];
        break;
    }
    if (is_null($sLanguage)) error_exit("ERR: language name not specified!\n");
    if (!preg_match('/^\w+$/', $sLanguage))
        error_exit("ERR: invalid language specification!\n");
    if (file_exists(FRAMEWORKLANG."/$sLanguage.lang"))
        error_exit("ERR: language files for $sLanguage already exist\n");

    foreach (listModules() as $sModule) {
        $sPathSource = ($sModule == 'FRAMEWORK') ? FRAMEWORKLANG : MODULEPATH."/$sModule/lang";
        if (file_exists($sPathSource.'/en.lang')) {
            $arrLang = loadLanguageFile($sPathSource.'/en.lang');
            writeLanguageFile($sPathSource."/$sLanguage.lang", $arrLang,
                ($sModule == 'FRAMEWORK'));
        }
    }

    return TRUE;
}

function action_addTranslation($opt)
{
    $sModule = NULL;
    $sLanguage = NULL;
    $sEnglishString = NULL;
    $sTranslatedString = NULL;

    foreach ($opt[0] as $option) switch ($option[0]) {
    case '--language':
        $sLanguage = $option[1];
        break;
    case '--module':
        $sModule = $option[1];
        break;
    case '--string-en':
        if (trim($option[1]) != '') $sEnglishString = $option[1];
        break;
    case '--string-tr':
        if (trim($option[1]) != '') $sTranslatedString = $option[1];
        break;
    }

    if (is_null($sModule)) error_exit("ERR: module name not specified!\n");
    if (!preg_match('/^\w+$/', $sModule))
        error_exit("ERR: invalid module specification!\n");
    if (is_null($sLanguage)) error_exit("ERR: language name not specified!\n");
    if (!preg_match('/^\w+$/', $sLanguage))
        error_exit("ERR: invalid language specification!\n");
    if (is_null($sEnglishString)) error_exit("ERR: English string not specified!\n");
    if (is_null($sTranslatedString)) error_exit("ERR: translated string not specified!\n");

    // Load existing translations if they exist
    $sPathSource = (($sModule == 'FRAMEWORK') ? FRAMEWORKLANG : MODULEPATH."/$sModule/lang").
        "/$sLanguage.lang";
    $arrLang = file_exists($sPathSource) ? loadLanguageFile($sPathSource) : array();
    if (array_key_exists($sEnglishString, $arrLang))
        error_exit("ERR: translation for string already exists!\n");
    $arrLang[$sEnglishString] = $sTranslatedString;
    writeLanguageFile($sPathSource, $arrLang, ($sModule == 'FRAMEWORK'));

    return TRUE;
}

function action_saveTranslation($opt)
{
    $sLanguageSpec = NULL;

    foreach ($opt[0] as $option) switch ($option[0]) {
    case '--savetranslation':
        $sLanguageSpec = $option[1];
        break;
    }

    $languagespec = loadLanguageSpec($sLanguageSpec);

    // Load existing translations if they exist
    $sPathSource = (($languagespec['module'] == 'FRAMEWORK') ? FRAMEWORKLANG : MODULEPATH."/{$languagespec['module']}/lang").
        "/{$languagespec['language']}.lang";
    $arrLang = file_exists($sPathSource) ? loadLanguageFile($sPathSource) : array();
    $arrLang = array_merge($arrLang, $languagespec['arrlang']);
    writeLanguageFile($sPathSource, $arrLang, ($languagespec['module'] == 'FRAMEWORK'));
    return TRUE;
}

function loadLanguageSpec($sLanguageSpec)
{
    if (is_null($sLanguageSpec)) error_exit("ERR: language spec not specified!\n");
    if (!is_readable($sLanguageSpec)) error_exit("ERR: language spec at $sLanguageSpec is not readable!\n");
    $xml_languagespec = simplexml_load_file($sLanguageSpec);
    if ($xml_languagespec === FALSE) error_exit("ERR: failed to parse $sLanguageSpec as XML!\n");

    if (!preg_match('/^\w+$/', $xml_languagespec->language))
        error_exit("ERR: invalid language specification: ".$xml_languagespec->language."\n");
    if (!preg_match('/^\w+$/', $xml_languagespec->module))
        error_exit("ERR: invalid module specification: ".$xml_languagespec->module."\n");
    $arrLangNew = array();
    foreach ($xml_languagespec->translation as $translation)
        $arrLangNew[(string)$translation->original] = (string)$translation->translate;
    if (count($arrLangNew) <= 0) error_exit("ERR: no translations defined in language spec!\n");

    return array(
        'module'    =>  (string)$xml_languagespec->module,
        'language'  =>  (string)$xml_languagespec->language,
        'arrlang'   =>  $arrLangNew,
    );
}

function listModules()
{
    $modList = array('FRAMEWORK');
    if (!is_dir(MODULEPATH)) error_exit("ERR: module directory not found!\n");
    foreach (scandir(MODULEPATH) as $dir) {
        if (preg_match('/^\w+$/', $dir)) $modList[] = $dir;
    }
    return $modList;
}

function loadLanguageFile($filename)
{
    /* The following procedure needs some explanation. Since the Elastix language
     * files are PHP code, it is hard to write a custom parser that can cope with
     * all of the syntax issues that might be present in a legal language file.
     * Instead, this program will use the internal PHP parser using include()
     * on the language file. However, this introduces the risk that an attacker
     * can overwrite the requested filename with a malicious version, which
     * therefore will run as root inside the privileged script. In order to
     * mitigate this, the program will fork and drop privileges, include() the
     * file, and transmit a serialized version through a pipe. The parent side
     * will check that the serialized variable is an array composed of only
     * string keys and values, and only then return the array of translations.
     */
    if (!file_exists($filename)) error_exit("ERR: file not found: $filename\n");
    $socks = stream_socket_pair(STREAM_PF_UNIX, STREAM_SOCK_STREAM, STREAM_IPPROTO_IP);
    if (FALSE === $socks) error_exit("ERR: failed to create socketpair!\n");
    $iPid = pcntl_fork();
    if ($iPid == -1) error_exit("ERR: failed to fork!");
    if ($iPid != 0) {
        // Parent process - try to read serialized array from child pipe
        fclose($socks[0]);
        $s = stream_get_contents($socks[1]);
        fclose($socks[1]);
        posix_kill(-1 * $iPid, SIGKILL);
        $pidstatus = NULL;
        pcntl_waitpid($iPid, $pidstatus);

        // Unserialize data and return
        if ($s === FALSE) error_exit("ERR: failed to receive language data from child\n");
        $arrLang = unserialize($s);
        if (!is_array($arrLang)) error_exit("ERR: invalid serialized data\n");
        foreach ($arrLang as $k => $v) if (!is_string($k) || !is_string($v))
            error_exit("ERR: invalid language data!\n");
        return $arrLang;
    } else {
        // Child process - drop privileges, include the file and serialize to pipe
        fclose($socks[1]);
        if (FALSE === ($newuser = posix_getpwnam('nobody')))
            error_exit("ERR: failed to query information on user nobody\n");
        if (!posix_setgid($newuser['gid'])) error_exit("ERR: failed to switch gid\n");
        if (!posix_setuid($newuser['uid'])) error_exit("ERR: failed to switch uid\n");
        if (!posix_setsid() == -1) error_exit("ERR: failed to become session leader\n");

        // The insecure operation...
        include ($filename);

        global $arrLang;
        global $arrLangModule;

        $s = NULL;
        if (isset($arrLangModule) && is_array($arrLangModule)) {
            $s = serialize($arrLangModule);
        } elseif (isset($arrLang) && is_array($arrLang) && count($arrLang) > 0) {
            $s = serialize($arrLang);
        } else {
            error_exit("ERR: invalid language file '$filename' - does not define \$arrLang or \$arrLangModule!\n");
        }
        while (strlen($s) > 0) {
            $i = fwrite($socks[0], $s);
            if ($i === FALSE) error_exit("ERR: failed to write language data to parent!\n");
            $s = substr($s, $i);
        }
        fflush($socks[0]);
        fclose($socks[0]);
        exit(0);
    }
}

function writeLanguageFile($filename, $arrLang, $bAsFramework)
{
    $list = '';
    foreach ($arrLang as $k => $v)
        $list .= "\t\"".phpstring($k)."\" => \"".phpstring($v)."\",\n";
    $sArrayVariable = $bAsFramework ? 'arrLang' : 'arrLangModule';
    $sDate = date('Y-m-d H:i:s');
    $sTemplate = <<<LANG_TEMPLATE
<?php
/* vim: set expandtab tabstop=4 softtabstop=4 shiftwidth=4:
   CodificaciÃ³n: UTF-8
  +----------------------------------------------------------------------+
  | Elastix version 2.3                                                  |
  | http://www.elastix.com                                               |
  +----------------------------------------------------------------------+
  | Copyright (c) 2006 Palosanto Solutions S. A.                         |
  +----------------------------------------------------------------------+
  | Cdla. Nueva Kennedy Calle E 222 y 9na. Este                          |
  | Telfs. 2283-268, 2294-440, 2284-356                                  |
  | Guayaquil - Ecuador                                                  |
  | http://www.palosanto.com                                             |
  +----------------------------------------------------------------------+
  | The contents of this file are subject to the General Public License  |
  | (GPL) Version 2 (the "License"); you may not use this file except in |
  | compliance with the License. You may obtain a copy of the License at |
  | http://www.opensource.org/licenses/gpl-license.php                   |
  |                                                                      |
  | Software distributed under the License is distributed on "AS IS"     |
  | basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See  |
  | the License for the specific language governing rights and           |
  | limitations under the License.                                       |
  +----------------------------------------------------------------------+
  | The Original Code is: Elastix Open Source.                           |
  | The Initial Developer of the Original Code is PaloSanto Solutions    |
  |                                                                      |
  | Translated by: YOUR_NAME_HERE                                        |
  | Email: youremail@example.org                                         |
  +----------------------------------------------------------------------+
  \$Id: en.lang,v 1.7 $sDate username Exp $ */
global \$$sArrayVariable;
\$$sArrayVariable=array(
$list);
?>
LANG_TEMPLATE;
    return file_put_contents($filename, $sTemplate);
}
?>
