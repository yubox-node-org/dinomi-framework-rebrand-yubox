#!/usr/bin/php
<?php
/* vim: set expandtab tabstop=4 softtabstop=4 shiftwidth=4:
  CodificaciÃ³n: UTF-8
  +----------------------------------------------------------------------+
  | Elastix version 2.0                                                  |
  | http://www.elastix.com                                               |
  +----------------------------------------------------------------------+
  | Copyright (c) 2006 Palosanto Solutions S. A.                         |
  +----------------------------------------------------------------------+
  | Cdla. Nueva Kennedy Calle E 222 y 9na. Este                          |
  | Telfs. 2283-268, 2294-440, 2284-356                                  |
  | Guayaquil - Ecuador                                                  |
  | http://www.palosanto.com                                             |
  +----------------------------------------------------------------------+
  | The contents of this file are subject to the General Public License  |
  | (GPL) Version 2 (the "License"); you may not use this file except in |
  | compliance with the License. You may obtain a copy of the License at |
  | http://www.opensource.org/licenses/gpl-license.php                   |
  |                                                                      |
  | Software distributed under the License is distributed on an "AS IS"  |
  | basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See  |
  | the License for the specific language governing rights and           |
  | limitations under the License.                                       |
  +----------------------------------------------------------------------+
  | The Original Code is: Elastix Open Source.                           |
  | The Initial Developer of the Original Code is PaloSanto Solutions    |
  +----------------------------------------------------------------------+
 */
define ('FIRSTBOOT_BASEPATH', '/var/spool/elastix-mysqldbscripts');

if (!($documentRoot = getenv('ELASTIX_ROOT'))) $documentRoot="/var/www/html";
require_once("$documentRoot/libs/misc.lib.php");
require_once("$documentRoot/configs/default.conf.php");
load_default_timezone();

if (count($argv) < 3) {
    fprintf(STDERR, "Use: %s [install|update|delete] /path/to/database/directory (oldrpmversion (exportonly))\n", $argv[0]);
    exit(0);
}
$action = $argv[1];
$basepath = $argv[2];
$oldrpmversion = (count($argv) > 3 && !empty($argv[3])) ? $argv[3] : NULL;
$exportonly = (count($argv) > 4 ) ? ($argv[4] ? TRUE : FALSE) : FALSE;

if (!in_array($action, array('install', 'update', 'delete'))) {
    fprintf(STDERR, "ERR: unsupported database action $action\n");
    exit(1);
}

$manifest = loadDatabaseManifest($basepath);
if (is_null($manifest)) {
    fputs(STDERR, "ERR: No databases were found in file db.info\n");
    exit(1);
}
foreach ($manifest as $dbname => $dbinfo) {
    if (empty($dbinfo['engine'])) {
        fputs(STDERR, "ERR: missing engine for database $dbname\n");
        exit(1);
    }
    if (!class_exists('SchemaUpdater_'.$dbinfo['engine'])) {
        fputs(STDERR, "ERR: engine {$dbinfo['engine']} not implemented for database $dbname\n");
        exit(1);
    }
    if (!empty($dbinfo['path']) && !is_dir($dbinfo['path'])) {
        fputs(STDERR, "ERR: database $dbname specifies invalid data path {$dbinfo['path']}\n");
        exit(1);
    }
}

$exitcode = 0;
foreach ($manifest as $dbname => $dbinfo) {
    try {
        $clsname = 'SchemaUpdater_'.$dbinfo['engine'];
        $updater = new $clsname($action, $basepath, $dbname, $oldrpmversion);
        if (!empty($dbinfo['path'])) $updater->setDatabasePath($dbinfo['path']);
        $sqlscript = $updater->getSQLScript();
        if ($exportonly) {
            print $sqlscript;
        } else {
            if (!$dbinfo['ignore_backup']) $updater->renameOldDatabaseIfRequired();
            $updater->executeSQLScript();
        }
    } catch (Exception $e) {
        fputs(STDERR, "ERR: ".$e->getMessage()."\n");
        $exitcode = 1;
    }
}
exit($exitcode);

function loadDatabaseManifest($basepath)
{
    $fullpath = $basepath."/db.info";
    if (!file_exists($fullpath)) {
        fputs(STDERR, "ERR: metadata file $fullpath not found.\n");
        return NULL;
    }
    if (filesize($fullpath) <= 0) {
        fputs(STDERR, "ERR: metadata file $fullpath is empty.\n");
        return NULL;
    }
    $arrData = parse_ini_file($fullpath, TRUE);
    if (!is_array($arrData)) {
        fputs(STDERR, "ERR: failed to parse $fullpath as an INI file.\n");
        return NULL;
    }
    return $arrData;
}

abstract class SchemaUpdater
{
    private $_action;
    protected $_basepath;
    protected $_dbname;
    private $_oldrpmver;

    private $_sqlscript = NULL;

    function __construct($action, $basepath, $dbname, $oldrpmver = NULL)
    {
        $this->_action = $action;
        $this->_basepath = $basepath;
        $this->_dbname = $dbname;
        $this->_oldrpmver = $oldrpmver;
        if (!in_array($this->_action, array('install', 'update', 'delete')))
            throw new Exception($this->_msgPrefix().'unsupported database action');
        if ($this->_action == 'update') {
            if (empty($this->_oldrpmver))
                throw new Exception($this->_msgPrefix().'missing old version for update');
            if (substr_count($this->_oldrpmver, '-') != 1)
                throw new Exception($this->_msgPrefix().'unsupported version format for update');
        }
    }

    function setDatabasePath($s) {}

    protected function _msgPrefix()
    {
        return $this->engineName()."({$this->_dbname}): ";
    }

    abstract function engineName();

    function isRunning() { return TRUE; }
    abstract protected function _existsDatabase();

    function renameOldDatabaseIfRequired()
    {
        if ($this->_action != 'install') return;
        if (!$this->_existsDatabase()) return;

        $date = date('YMd_His');
        $dbNewName = $this->_dbname."_$date";
        if (!$this->isRunning()) {
            throw new Exception($this->_msgPrefix().'engine not running, cannot rename database');
        }
        fputs(STDERR, 'WARN: '.$this->_msgPrefix()."schema already exists, renaming to {$dbNewName}...\n");
        $this->_renameDatabase($dbNewName);
    }

    abstract protected function _renameDatabase($dbNewName);

    function getSQLScript()
    {
        if (is_null($this->_sqlscript))
            $this->_sqlscript = $this->_buildSQLScript();
        return $this->_sqlscript;
    }

    private function _buildSQLScript()
    {
        $sql = '';

        switch ($this->_action) {
        case 'delete':
        case 'install':
            $actiondir = "{$this->_basepath}/{$this->_action}/{$this->_dbname}";
            $sqlfiles = $this->_listVersionedSQLFiles($actiondir);
            usort($sqlfiles, array($this, '_cmp_orderedSQL'));
            $sql = $this->_loadSQLScripts($actiondir, $sqlfiles);
            if ($this->_action != 'install') break;
            // Explicit fallthrough for install case to get all update scripts
        case 'update':
            $actiondir = "{$this->_basepath}/update/{$this->_dbname}/version_sql";
            $sqlfiles = $this->_listVersionedSQLFiles($actiondir);
            usort($sqlfiles, array($this, '_cmp_versionedSQL'));
            $sqlupdate = array();
            for ($i = 0; $i < count($sqlfiles); $i++) {
                if (substr_count($sqlfiles[$i], '_') != 2) {
                    throw new Exception($this->_msgPrefix().
                        "malformed versioned SQL filename: {$actiondir}/{$sqlfiles[$i]}");
                }
                if ($i > 0 && $this->_cmp_orderedSQL($sqlfiles[$i - 1], $sqlfiles[$i]) >= 0) {
                    fprintf(STDERR, 'WARN: '.$this->_msgPrefix().
                        " {$sqlfiles[$i - 1]} not strictly before {$sqlfiles[$i]} by index, ".
                        "using RPM version order instead.\n");
                }
                list($fileid, $rpmverA, $rpmverB) = explode('_', substr($sqlfiles[$i], 0, -4));
                if ($this->_action == 'install' || $this->_compareRPMVersion($this->_oldrpmver, $rpmverB) < 0) {
                    $sqlupdate[] = $sqlfiles[$i];
                }
            }
            if (count($sqlupdate) > 0) {
                $sql .= $this->_prefixUpdateSQL().
                    $this->_loadSQLScripts($actiondir, $sqlupdate);
            }
            break;
        }

        return $sql;
    }

    protected function _prefixUpdateSQL() { return ''; }

    private function _loadSQLScripts($actiondir, $sqlfiles)
    {
        $sql = '';
        foreach ($sqlfiles as $file) {
            $sql .= file_get_contents("{$actiondir}/{$file}")."\n\n";
        }
        return $sql;
    }

    private function _listVersionedSQLFiles($path)
    {
        if (!is_dir($path)) return array();
        $files = scandir($path);
        if (!is_array($files)) {
            throw new Exception($this->_msgPrefix().'failed to list files at '.$path);
        }

        // Cannot use array_filter() due to use of $path
        $sqlfiles = array();
        foreach ($files as $file) {
            $regs = NULL;
            if (substr($file, 0, 1) == '.') continue;
            if (!preg_match('/^(.+?)_(.+)\.sql$/', $file, $regs)) continue;
            if (!is_file("{$path}/{$file}")) continue;
            if (!ctype_digit($regs[1])) {
                throw new Exception($this->_msgPrefix()."malformed versioned SQL filename: {$path}/{$file}");
            }
            $sqlfiles[] = $file;
        }
        return $sqlfiles;
    }

    private function _cmp_orderedSQL($a, $b)
    {
        $a = explode('_', $a, 2);
        $b = explode('_', $b, 2);
        if ((int)$a[0] < (int)$b[0]) return -1;
        if ((int)$a[0] > (int)$b[0]) return 1;
        return strcmp($a[1], $b[1]);
    }

    private function _cmp_versionedSQL($a, $b)
    {
        $regs = NULL;
        if (preg_match('/^(.+)\.sql$/', $a, $regs)) $a = $regs[1];
        if (preg_match('/^(.+)\.sql$/', $b, $regs)) $b = $regs[1];
        $a = explode('_', $a);
        $b = explode('_', $b);
        $r = $this->_compareRPMVersion($a[1], $b[1]);
        if ($r != 0) return $r;
        return $this->_compareRPMVersion($a[2], $b[2]);
    }

    private function _compareRPMVersion($a, $b)
    {
        $a = explode('-', $a);
        $b = explode('-', $b);

        $r = $this->_compareRPMVersionString($a[0], $b[0]);
        if ($r != 0) return $r;
        return $this->_compareRPMVersionString($a[1], $b[1]);
    }

    private function _compareRPMVersionString($v1, $v2)
    {
        $v1 = preg_split("/[^a-zA-Z0-9]+/", $v1);
        $v2 = preg_split("/[^a-zA-Z0-9]+/", $v2);
        while (count($v1) > 0 && count($v2) > 0) {
            $a = array_shift($v1); $b = array_shift($v2);
            $bADigit = ctype_digit($a); $bBDigit = ctype_digit($b);
            if ($bADigit && $bBDigit) {
                $a = (int)$a; $b = (int)$b;
                if ($a > $b) return 1;
                if ($a < $b) return -1;
            } elseif ($bADigit != $bBDigit) {
                if ($bADigit) return 1;
                if ($bBDigit) return -1;
            } else {
                $rr = strcmp($a, $b);
                if ($rr != 0) return $rr;
            }
        }
        if (count($v1) > 0) return 1;
        if (count($v2) > 0) return -1;
        return 0;
    }

    abstract protected function _buildSQLCommandLine($sqlpath);

    function executeSQLScript()
    {
        $this->_purgeSQLScriptFirstBoot();

        $sqlscript = $this->getSQLScript();
        if (strlen($sqlscript) <= 0) return;

        // Write SQL script to make it available to client program
        $sqlpath = $this->_basepath.'/1_sqlFile.sql';
        file_put_contents($sqlpath, $sqlscript);

        if (!$this->isRunning()) {
            fputs(STDERR, 'WARN: '.$this->_msgPrefix()."engine not running\n");
            $this->_moveSQLScriptFirstBoot($sqlpath);
            return;
        }

        $command = $this->_buildSQLCommandLine($sqlpath);
        $output = $status = NULL;
        exec($command, $output, $status);
        if ($status != 0) {
            fputs(STDERR, "ERR: ".$this->_msgPrefix()."status $status from command: $command.\n");
            $this->_moveSQLScriptFirstBoot($sqlpath);
            throw new Exception($this->_msgPrefix()."action {$this->_action} failed for database {$this->_dbname}");
        }
        unlink($sqlpath);
        $this->_postExecuteSQLAction();
    }

    private function _moveSQLScriptFirstBoot($sqlpath)
    {
        $fullpath = $this->_firstBootPath();
        if (!rename($sqlpath, $fullpath)) {
            throw new Exception($this->_msgPrefix()."failed to move $sqlpath to $fullpath");
        }
    }

    private function _purgeSQLScriptFirstBoot()
    {
        $fullpath = $this->_firstBootPath();
        if (!file_exists($fullpath)) return;
        fputs(STDERR, "WARN: ".$this->_msgPrefix()."removing file $fullpath\n");
        unlink($fullpath);
    }

    private function _firstBootPath()
    {
        return FIRSTBOOT_BASEPATH."/{$this->_dbname}_{$this->_action}.sql";
    }

    protected function _postExecuteSQLAction() {}
}

class SchemaUpdater_mysql extends SchemaUpdater
{
    private $_passwd = NULL;
    private $_datapath = '/var/lib/mysql';

    function engineName() { return 'mysql'; }
    function setDatabasePath($s) { $this->_datapath = $s; }

    function isRunning()
    {
        // CentOS 7 ISO install runs in chroot which messes up /sbin/service.
        // Debian places pidof in /usr/bin/pidof not /sbin/pidof
        $pidof = NULL;
        foreach (array('/sbin/pidof', '/usr/bin/pidof', '/bin/pidof') as $s) if (is_executable($s)) {
            $pidof = $s;
            break;
        }
        return is_null($pidof) ? FALSE : (strlen(trim(`$pidof mysqld`)) > 0);
    }

    protected function _existsDatabase()
    {
        return is_dir("{$this->_datapath}/{$this->_dbname}");
    }

    private function _getPasswd()
    {
        if (is_null($this->_passwd)) {
            $this->_passwd = obtenerClaveConocidaMySQL('root');
        }
        return $this->_passwd;
    }

    protected function _renameDatabase($dbNewName)
    {
        $dumpfile = "{$this->_basepath}/$dbNewName.dump";
        if (FALSE === file_put_contents($dumpfile,
            "CREATE DATABASE IF NOT EXISTS $dbNewName;\nUSE $dbNewName;\n")) {
            throw new Exception($this->_msgPrefix()."failed to initialize file $dumpfile");
        }

        $mysqlcred = '-u root '.escapeshellarg("-p".$this->_getPasswd());
        $cmdarray = array(
            array(
                'create dumpfile for',
                "mysqldump $mysqlcred ".escapeshellarg($this->_dbname).' >> '.escapeshellarg($dumpfile)
            ),
            array(
                'rename',
                "mysql $mysqlcred < ".escapeshellarg($dumpfile)
            ),
            array(
                'drop',
                "mysql $mysqlcred -e ".escapeshellarg("DROP DATABASE {$this->_dbname}")
            ),
        );
        foreach ($cmdarray as $cmd) {
            $output = $status = NULL;
            exec($cmd[1], $output, $status);
            if ($status != 0) {
                $msg = "failed to $cmd[0] database - status $status from command: $cmd[1]";
                throw new Exception($this->_msgPrefix().$msg);
            }
        }
    }

    protected function _prefixUpdateSQL()
    {
        return "USE {$this->_dbname};\n";
    }

    protected function _buildSQLCommandLine($sqlpath)
    {
        return 'mysql -uroot '.
            escapeshellarg("-p".$this->_getPasswd()).' '.
            escapeshellarg($this->_existsDatabase() ? $this->_dbname : '').' < '.
            escapeshellarg($sqlpath);
    }
}

class SchemaUpdater_sqlite3 extends SchemaUpdater
{
    private $_sqlitepath = '/var/www/db';

    function engineName() { return 'sqlite3'; }
    function setDatabasePath($s) { $this->_sqlitepath = $s; }

    private function _dbpath() { return $this->_sqlitepath."/{$this->_dbname}.db"; }

    protected function _existsDatabase()
    {
        // For purposes of backup, a SQLite database does not exist if its file is empty
        return file_exists($this->_dbpath()) && (filesize($this->_dbpath()) > 0);
    }

    protected function _renameDatabase($dbNewName)
    {
        if (!rename($this->_dbpath(), $this->_sqlitepath.'/'.$dbNewName)) {
            throw new Exception($this->_msgPrefix().'failed to rename '.$this->_dbpath().' to '.($this->_sqlitepath.'/'.$dbNewName));
        }
    }

    protected function _buildSQLCommandLine($sqlpath)
    {
        return 'sqlite3 '.
            escapeshellarg($this->_dbpath()).' '.
            escapeshellarg(".read $sqlpath");
    }

    protected function _postExecuteSQLAction()
    {
        // Copy user and group from base directory, and use them for created files
        $pwuid = posix_getpwuid(fileowner($this->_sqlitepath));
        $grgid = posix_getgrgid(filegroup($this->_sqlitepath));

        $datafile = $this->_dbpath();
        if (!chown($datafile, $pwuid['name']))
            throw new Exception($this->_msgPrefix()."failed to change owner on $datafile to ".$pwuid['name']);
        if (!chgrp($datafile, $grgid['name']))
            throw new Exception($this->_msgPrefix()."failed to change group on $datafile to ".$grgid['name']);
    }
}
